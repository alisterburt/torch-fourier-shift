{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>torch-fourier-shift is a package for shifting 2D and 3D images with subpixel precision  by applying phase shifts to Fourier transforms in PyTorch.</p> <p> </p> Shifting a 2D image with torch-fourier-shift <pre><code>import torch\nfrom torch_fourier_shift import fourier_shift_image_2d\n\n# create a dummy image\nmy_image = torch.tensor(\n    [[0, 0, 0, 0, 0, 0],\n     [0, 1, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0]]\n)\n\n# shift the image by 1 pixel in dim 0, 2 pixels in dim 1\nshifted_image = fourier_shift_image_2d(image=my_image, shifts=torch.tensor([1, 2]))\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>torch-fourier-shift is available on PyPI.</p> <pre><code>pip install torch-fourier-shift\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Please check the examples linked in the sidebar</p>"},{"location":"examples/shift_dft_2d/","title":"Shift 2D Fourier Transform(s)","text":""},{"location":"examples/shift_dft_2d/#torch_fourier_shift.fourier_shift_dft_2d","title":"<code>torch_fourier_shift.fourier_shift_dft_2d(dft: torch.Tensor, image_shape: tuple[int, int], shifts: torch.Tensor, rfft: bool, fftshifted: bool)</code>","text":"<p>Apply phase shifts to 2D discrete Fourier transforms.</p> <p>Parameters:</p> Name Type Description Default <code>dft</code> <code>torch.Tensor</code> <p><code>(..., h, w)</code> array containing DFTs.</p> required <code>image_shape</code> <code>tuple[int, int]</code> <p><code>(h, w)</code> of images prior to DFT computation.</p> required <code>shifts</code> <code>torch.Tensor</code> <p><code>(..., 2)</code> array of 2D shifts in <code>h</code> and <code>w</code>.</p> required <code>rfft</code> <code>bool</code> <p>Whether the input was computed using <code>rfft</code>.</p> required <code>fftshifted</code> <code>bool</code> <p>Whether the DFTs have been fftshifted to center the DC component.</p> required <p>Returns:</p> Name Type Description <code>shifted_dfts</code> <code>torch.Tensor</code> <p><code>(..., h, w)</code> array of DFTs with phase shifts applied.</p> Source code in <code>src/torch_fourier_shift/fourier_shift_dft.py</code> <pre><code>def fourier_shift_dft_2d(\n    dft: torch.Tensor,\n    image_shape: tuple[int, int],\n    shifts: torch.Tensor,\n    rfft: bool,\n    fftshifted: bool,\n):\n    \"\"\"Apply phase shifts to 2D discrete Fourier transforms.\n\n    Parameters\n    ----------\n    dft: torch.Tensor\n        `(..., h, w)` array containing DFTs.\n    image_shape: tuple[int, int]\n        `(h, w)` of images prior to DFT computation.\n    shifts: torch.Tensor\n        `(..., 2)` array of 2D shifts in `h` and `w`.\n    rfft: bool\n        Whether the input was computed using `rfft`.\n    fftshifted: bool\n        Whether the DFTs have been fftshifted to center the DC component.\n\n    Returns\n    -------\n    shifted_dfts: torch.Tensor\n        `(..., h, w)` array of DFTs with phase shifts applied.\n    \"\"\"\n    phase_shifts = phase_shift_grid_2d(\n        shifts=shifts,\n        image_shape=image_shape,\n        rfft=rfft,\n        fftshift=fftshifted,\n    )\n    return dft * phase_shifts\n</code></pre>"},{"location":"examples/shift_dft_3d/","title":"Shift 3D Fourier Transform(s)","text":""},{"location":"examples/shift_dft_3d/#torch_fourier_shift.fourier_shift_dft_3d","title":"<code>torch_fourier_shift.fourier_shift_dft_3d(dft: torch.Tensor, image_shape: tuple[int, int, int], shifts: torch.Tensor, rfft: bool = False, fftshifted: bool = False)</code>","text":"<p>Apply phase shifts to 3D discrete Fourier transforms.</p> <p>Parameters:</p> Name Type Description Default <code>dft</code> <code>torch.Tensor</code> <p><code>(..., h, w)</code> array containing DFTs.</p> required <code>image_shape</code> <code>tuple[int, int, int]</code> <p><code>(h, w)</code> of images prior to DFT computation.</p> required <code>shifts</code> <code>torch.Tensor</code> <p><code>(..., 3)</code> array of 3D shifts in <code>d</code>, <code>h</code> and <code>w</code>.</p> required <code>rfft</code> <code>bool</code> <p>Whether the input was computed using <code>rfft</code>.</p> <code>False</code> <code>fftshifted</code> <code>bool</code> <p>Whether the DFTs have been fftshifted to center the DC component.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>shifted_dfts</code> <code>torch.Tensor</code> <p><code>(..., h, w)</code> array of DFTs with phase shifts applied.</p> Source code in <code>src/torch_fourier_shift/fourier_shift_dft.py</code> <pre><code>def fourier_shift_dft_3d(\n    dft: torch.Tensor,\n    image_shape: tuple[int, int, int],\n    shifts: torch.Tensor,\n    rfft: bool = False,\n    fftshifted: bool = False,\n):\n    \"\"\"Apply phase shifts to 3D discrete Fourier transforms.\n\n    Parameters\n    ----------\n    dft: torch.Tensor\n        `(..., h, w)` array containing DFTs.\n    image_shape: tuple[int, int, int]\n        `(h, w)` of images prior to DFT computation.\n    shifts: torch.Tensor\n        `(..., 3)` array of 3D shifts in `d`, `h` and `w`.\n    rfft: bool\n        Whether the input was computed using `rfft`.\n    fftshifted: bool\n        Whether the DFTs have been fftshifted to center the DC component.\n\n    Returns\n    -------\n    shifted_dfts: torch.Tensor\n        `(..., h, w)` array of DFTs with phase shifts applied.\n    \"\"\"\n    phase_shifts = phase_shift_grid_3d(\n        shifts=shifts,\n        image_shape=image_shape,\n        rfft=rfft,\n        fftshift=fftshifted,\n    )\n    return dft * phase_shifts\n</code></pre>"},{"location":"examples/shift_image_2d/","title":"Shift 2D Image(s)","text":"<pre><code>import torch\nfrom torch_fourier_shift import fourier_shift_image_2d\n\n# create a dummy image\nmy_image = torch.tensor(\n    [[0, 0, 0, 0, 0, 0],\n     [0, 1, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0]]\n)\n\n# shift the image by 1 pixel in dim 0, 2 pixels in dim 1\nshifted_image = fourier_shift_image_2d(image=my_image, shifts=torch.tensor([1, 2]))\n</code></pre>"},{"location":"examples/shift_image_2d/#notes","title":"Notes","text":"<ul> <li>shifts can be applied to arrays of 2D images <code>(..., h, w)</code></li> <li>arrays of 2D shifts are supported <code>(..., 2)</code></li> </ul>"},{"location":"examples/shift_image_2d/#torch_fourier_shift.fourier_shift_image_2d","title":"<code>torch_fourier_shift.fourier_shift_image_2d(image: torch.Tensor, shifts: torch.Tensor)</code>","text":"<p>Translate one or more 2D images by phase shifting their Fourier transforms.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>torch.Tensor</code> <p><code>(..., h, w)</code> image(s).</p> required <code>shifts</code> <code>torch.Tensor</code> <p><code>(..., 2)</code> array of 2D shifts in <code>h</code> and <code>w</code>.</p> required <p>Returns:</p> Name Type Description <code>shifted_images</code> <code>torch.Tensor</code> <p><code>(..., h, w)</code> array of shifted images.</p> Source code in <code>src/torch_fourier_shift/fourier_shift_image.py</code> <pre><code>def fourier_shift_image_2d(image: torch.Tensor, shifts: torch.Tensor):\n    \"\"\"Translate one or more 2D images by phase shifting their Fourier transforms.\n\n    Parameters\n    ----------\n    image: torch.Tensor\n        `(..., h, w)` image(s).\n    shifts: torch.Tensor\n        `(..., 2)` array of 2D shifts in `h` and `w`.\n\n    Returns\n    -------\n    shifted_images: torch.Tensor\n        `(..., h, w)` array of shifted images.\n    \"\"\"\n    h, w = image.shape[-2:]\n    image = torch.fft.rfftn(image, dim=(-2, -1))\n    image = fourier_shift_dft_2d(\n        image,\n        image_shape=(h, w),\n        shifts=shifts,\n        rfft=True,\n        fftshifted=False\n    )\n    image = torch.fft.irfftn(image, dim=(-2, -1))\n    return torch.real(image)\n</code></pre>"},{"location":"examples/shift_image_3d/","title":"Shift 3D Image(s)","text":"<pre><code>import torch\nfrom torch_fourier_shift import fourier_shift_image_2d\n\n# create a dummy image\nmy_image = torch.tensor(\n    [[0, 0, 0, 0, 0, 0],\n     [0, 1, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0]]\n)\n\n# shift the image by 1 pixel in dim 0, 2 pixels in dim 1\nshifted_image = fourier_shift_image_2d(image=my_image, shifts=torch.tensor([1, 2]))\n</code></pre>"},{"location":"examples/shift_image_3d/#notes","title":"Notes","text":"<ul> <li>shifts can be applied to arrays of 3D images <code>(..., d, h, w)</code></li> <li>arrays of 3D shifts are supported <code>(..., 3)</code></li> </ul>"},{"location":"examples/shift_image_3d/#torch_fourier_shift.fourier_shift_image_3d","title":"<code>torch_fourier_shift.fourier_shift_image_3d(image: torch.Tensor, shifts: torch.Tensor)</code>","text":"<p>Translate one or more 3D images by phase shifting their Fourier transforms.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>torch.Tensor</code> <p><code>(..., d, h, w)</code> image(s).</p> required <code>shifts</code> <code>torch.Tensor</code> <p><code>(..., 3)</code> array of 3D shifts in <code>d</code>, <code>h</code> and <code>w</code>.</p> required <p>Returns:</p> Name Type Description <code>shifted_image</code> <code>torch.Tensor</code> <p><code>(..., d, h, w)</code> array of shifted images.</p> Source code in <code>src/torch_fourier_shift/fourier_shift_image.py</code> <pre><code>def fourier_shift_image_3d(image: torch.Tensor, shifts: torch.Tensor):\n    \"\"\"Translate one or more 3D images by phase shifting their Fourier transforms.\n\n    Parameters\n    ----------\n    image: torch.Tensor\n        `(..., d, h, w)` image(s).\n    shifts: torch.Tensor\n        `(..., 3)` array of 3D shifts in `d`, `h` and `w`.\n\n    Returns\n    -------\n    shifted_image: torch.Tensor\n        `(..., d, h, w)` array of shifted images.\n    \"\"\"\n    d, h, w = image.shape[-3:]\n    image = torch.fft.rfftn(image, dim=(-3, -2, -1))\n    image = fourier_shift_dft_3d(\n        image,\n        image_shape=(d, h, w),\n        shifts=shifts,\n        rfft=True,\n        fftshifted=False\n    )\n    image = torch.fft.irfftn(image, dim=(-3, -2, -1))\n    return torch.real(image)\n</code></pre>"}]}